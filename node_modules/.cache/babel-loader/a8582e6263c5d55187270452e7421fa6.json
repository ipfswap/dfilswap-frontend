{"ast":null,"code":"import _regeneratorRuntime from\"/home/defi/dfilswap-frontend/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/defi/dfilswap-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/defi/dfilswap-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/defi/dfilswap-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import Web3 from'web3';import BigNumber from'bignumber.js';import{Contracts}from'./lib/contracts.js';import{Account}from'./lib/accounts.js';import{EVM}from'./lib/evm.js';import{contractAddresses}from'./lib/constants';export var Sushi=/*#__PURE__*/function(){function Sushi(provider,networkId,testing,options){_classCallCheck(this,Sushi);var realProvider;if(typeof provider==='string'){if(provider.includes('wss')){realProvider=new Web3.providers.WebsocketProvider(provider,options.ethereumNodeTimeout||10000);}else{realProvider=new Web3.providers.HttpProvider(provider,options.ethereumNodeTimeout||10000);}}else{realProvider=provider;}this.web3=new Web3(realProvider);if(testing){this.testing=new EVM(realProvider);this.snapshot=this.testing.snapshot();}if(options.defaultAccount){this.web3.eth.defaultAccount=options.defaultAccount;}this.contracts=new Contracts(realProvider,networkId,this.web3,options);this.sushiAddress=contractAddresses.sushi[networkId];this.masterChefAddress=contractAddresses.masterChef[networkId];this.wethAddress=contractAddresses.weth[networkId];}_createClass(Sushi,[{key:\"resetEVM\",value:function(){var _resetEVM=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:this.testing.resetEVM(this.snapshot);case 1:case\"end\":return _context.stop();}}},_callee,this);}));function resetEVM(){return _resetEVM.apply(this,arguments);}return resetEVM;}()},{key:\"addAccount\",value:function addAccount(address,number){this.accounts.push(new Account(this.contracts,address,number));}},{key:\"setProvider\",value:function setProvider(provider,networkId){this.web3.setProvider(provider);this.contracts.setProvider(provider,networkId);this.operation.setNetworkId(networkId);}},{key:\"setDefaultAccount\",value:function setDefaultAccount(account){this.web3.eth.defaultAccount=account;this.contracts.setDefaultAccount(account);}},{key:\"getDefaultAccount\",value:function getDefaultAccount(){return this.web3.eth.defaultAccount;}},{key:\"loadAccount\",value:function loadAccount(account){var newAccount=this.web3.eth.accounts.wallet.add(account.privateKey);if(!newAccount||account.address&&account.address.toLowerCase()!==newAccount.address.toLowerCase()){throw new Error(\"Loaded account address mismatch.\\n        Expected \".concat(account.address,\", got \").concat(newAccount?newAccount.address:null));}}},{key:\"toBigN\",value:function toBigN(a){return BigNumber(a);}}]);return Sushi;}();","map":null,"metadata":{},"sourceType":"module"}